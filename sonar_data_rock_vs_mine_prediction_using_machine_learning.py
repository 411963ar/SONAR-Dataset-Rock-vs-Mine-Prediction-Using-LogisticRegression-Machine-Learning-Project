# -*- coding: utf-8 -*-
"""Sonar data rock vs mine prediction using machine learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yCxXz91IUQErxkNT2JIrx4eWbRZtVgo5

Importing libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split #to split data into train,test
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Loading Dataset and cdata processing"""

df= pd.read_csv("/content/sonar.csv", header=None)

df.head(5)

"""no. of rows and columns"""

df.shape

df.describe()

#to check no. of rocks and no. of mines in data

df[60].value_counts()

# M represents mines and R represents rocks

# we can use group by to group mine and rocks and check mean of each column in a group that will help to predict whether an object is mine or rock

df.groupby(60).mean()

#separating data and lables or separating target output from other features

x=df.drop(columns=60, axis=1)
y=df[60]

print(x)
print(y)

"""Now spliting data into training and test data"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,stratify=y,random_state=1)

# stratify =y tells that we want to split data on the basis of y or target output,that means it will check the number of rocks and mines lables then it will split data on the basis of no. of rock and mines in data set so that we can avoid class imbalance issues

# random state=1 if 2 different people doing same code will apply then the data will be splited in a same way for both people,other wise the split will be different

print(x_train.shape,x_test.shape,y_train.shape,y_test.shape)

"""model training"""

model= LogisticRegression()

#training the model with training data

model.fit(x_train,y_train)

"""Model evaluation"""

#Accuracy of training data

x_train_prediction=model.predict(x_train)
trainin_data_accuracy=accuracy_score(x_train_prediction,y_train)

print("Accuracy of training data is:",trainin_data_accuracy)

#Accuracy of test data

x_test_prediction=model.predict(x_test)
test_data_accuracay=accuracy_score(x_test_prediction,y_test)

print("Accuracy of test data is:",test_data_accuracay)

"""Making A PREDICTIVE SYSTEM TO PREDICT ROCK OR MINE"""

input_data=(0.0187,0.0346,0.0168,0.0177,0.0393,0.1630,0.2028,0.1694,0.2328,0.2684,0.3108,0.2933,0.2275,0.0994,0.1801,0.2200,0.2732,0.2862,0.2034,0.1740,0.4130,0.6879,0.8120,0.8453,0.8919,0.9300,0.9987,1.0000,0.8104,0.6199,0.6041,0.5547,0.4160,0.1472,0.0849,0.0608,0.0969,0.1411,0.1676,0.1200,0.1201,0.1036,0.1977,0.1339,0.0902,0.1085,0.1521,0.1363,0.0858,0.0290,0.0203,0.0116,0.0098,0.0199,0.0033,0.0101,0.0065,0.0115,0.0193,0.0157)
#changing the datatype of data into numpy array for better and effecient processing

input_data_as_numpy_array=np.asarray(input_data)
# we need to reshape numpy array as we are predicting for 1 instance or 1 row only
input_data_reshaped= input_data_as_numpy_array.reshape(1,-1)# 1,-1 represents one instance
prediction= model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 'R'):
  print('THE OBJECT IS ROCK')
else:
  print('THE OBJECT IS MINE')

